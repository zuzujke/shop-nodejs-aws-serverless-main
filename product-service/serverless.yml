service: product-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    ENV_STAGE: ${opt:stage, 'dev'}
    PGHOST: ${self:custom.dotenvVars.PGHOST, env:PGHOST, ''}
    PGUSER: ${self:custom.dotenvVars.PGUSER, env:PGUSER, ''}
    PGDATABASE: ${self:custom.dotenvVars.PGDATABASE, env:PGDATABASE, ''}
    PGPASSWORD: ${self:custom.dotenvVars.PGPASSWORD, env:PGPASSWORD, ''}
    PGPORT: ${self:custom.dotenvVars.PGPORT, env:PGPORT, ''}

plugins:
  - serverless-webpack
  - serverless-auto-swagger

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    dotenvVars: ${file(configs.js)}

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          request:
              schema:
              application/json: ${file(src/schemas/createProductSchema.json)}

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GetProductsListLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetProductsListLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: GetProductsListLambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource:
                    - arn:aws:dynamodb:eu-west-1:958195610435:table/products
                    - arn:aws:dynamodb:eu-west-1:958195610435:table/stocks

    CatalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: catalogItemsQueue
    createProductTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "create-product-topic"
    createProductTopicSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Protocol: "email"
        TopicArn:
          Ref: "createProductTopic"
        FilterPolicy:
          price:
            - "numeric":
                - "<="
                - 500
        FilterPolicyScope: "MessageAttributes"
        Endpoint: "kosxsem@gmail.com"
